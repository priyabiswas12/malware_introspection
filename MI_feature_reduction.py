

import time
start_time = time.time()

import numpy as numpy
import pandas as pd

import pickle   
with open('finalarraybvm100.2bin.pkl', 'rb') as f:
    finalarray = pickle.load(f)
    
  
with open('vocabfilebvm100.2.pkl', 'rb') as r:
    vocabdiction = pickle.load(r)
    
    
a = numpy.zeros((300,), dtype=int)
b = numpy.ones((300,), dtype=int)

targetarray = numpy.concatenate((a, b), axis=None)



X = finalarray

y = targetarray

from sklearn.model_selection import train_test_split   
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)



print("Starting feature reduction")


from skfeature.function.similarity_based import fisher_score
import numpy as np

score = fisher_score.fisher_score(X_train, y_train)

def feature_ranking(score):
    """
    Rank features in descending order according to fisher score, the larger the fisher score, the more important the
    feature is
    """
    idx = np.argsort(score, 0)
    return idx[::-1]

idx = feature_ranking(score)

listidx = list(idx)

print("done fisher score")






X_train_df = pd.DataFrame(X_train)
from sklearn.metrics.pairwise import pairwise_distances
X_train_dft = (1 - pairwise_distances(X_train_df.T, metric = "hamming"))
print("X_train_dft done")

xsearcharray = np.argwhere(X_train_dft == 1)
print("xsearcharray done")


junk =[]
for row in xsearcharray:
    if row[0] == row[1]:
        pass
    elif listidx.index(row[0]) < listidx.index(row[1]):
        junk.append(row[1])
    else:
        junk.append(row[0])


junk = list(dict.fromkeys(junk))
print("junklength= ", len(junk))


keep =[]
keep = list(range(0, len(vocabdiction)))
for num in junk:
    keep.remove(num)


import pickle

keep1002 = open("keep100.2bin.pkl","wb")
pickle.dump(keep,keep1002)
keep1002.close()


print("keeplength= ", len(keep))



X_train_new = X_train[:, keep]
X_test_new = X_test[:, keep] 





from sklearn.ensemble import RandomForestClassifier

clf=RandomForestClassifier(n_estimators=100)   
clf.fit(X_train_new,y_train)

y_pred = clf.predict(X_test_new)

from sklearn import metrics
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))



import pickle
with open('model_pickle100.2binwfr', 'wb') as q:
    pickle.dump(clf, q)



print("--- %s seconds ---" % (time.time() - start_time))